from building import *

CWD = GetCurrentDir()

Import('BUILD_DIR')

generate(Glob('config/*.json'))

objs = Glob('*/*.c') + Glob('*.c')
objsAsm = Glob('*/*.S')
Os_Cfg = Glob('config/GEN/Os*.c')


@register_application
class ApplicationVirt(Application):
    compiler = 'Arm64GCC'

    def config(self):
        self.LIBS = ['LibC', 'StdTimer', 'Arm']
        self.CPPPATH += ['$INFRAS']
        self.Append(CPPFLAGS=['-Os', '-mcpu=cortex-a57+nofp'])
        self.Append(LINKFLAGS=['-T', '%s/linker-app.lds' % (CWD),
                               '-Map', '%s/virtbl.map' % (BUILD_DIR), '-Os'])
        self.SelectOS(arch='arm64', config=Os_Cfg,
                      CPPDEFINES=['USE_STD_DEBUG', 'OS_STK_SIZE_SCALER=4', 'USE_SMP',
                                  '__AARCH64__', 'OS_TICKS_PER_SECOND=1000'],
                      CPPPATH=['%s/../arm' % (CWD)])
        self.source = objs


@register_application
class ApplicationVirtRun(Application):
    def config(self):
        pass

    def build(self):
        qemu = Qemu(arch='arm64')
        target = '%s/Virt' % (BUILD_DIR[:-3])
        if(IsPlatformWindows()):
            target = target + '.exe'
        qemu.Run('-M virt -cpu cortex-a57 -smp 2 -kernel %s' % (target))
